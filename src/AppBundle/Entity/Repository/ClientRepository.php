<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use JMS\DiExtraBundle\Annotation as DI;
use Monolog\Logger;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends EntityRepository
{


    /**
     * @var Logger
     */
    protected $logger;

    /**
     * @DI\InjectParams({
     * "logger" = @DI\Inject("logger")
     * })
     *
     * @param $logger
     */
    public function setLogger($logger){
        $this->logger = $logger;
    }

    /**
     * Get query of all Clients
     *
     * @param array $options
     *
     * @return Query
     */
    public function getAllQueryList($options)
    {
        $this->logger->info('InvestorClientRepositoryRepository getAllQueryList()');

        $defaultOptions = array(
            'search' => '',
            'show' => 10,
            'sort' => 'party.firstName',
            'direction' => 'asc',
        );

        foreach ($options as $key => $values) {
            if (!$values) {
                $options[$key] = $defaultOptions[$key];
            }
        }

        $qb = $this->createQueryBuilder('client')
            ->select('client')
            ->innerJoin('client.party', 'party')

        ;

        // search
        if ($options['search']) {
            if ($options['search'] != '') {
                $qb->andWhere($qb->expr()->orx(
                    $qb->expr()->like('party.firstName', $qb->expr()->literal('%'.$options['search'].'%')),
                    $qb->expr()->like('party.lastName', $qb->expr()->literal('%'.$options['search'].'%')),
                    $qb->expr()->like('party.registeredName', $qb->expr()->literal('%'.$options['search'].'%'))

                ));
            }
        }

        $qb->orderBy($options['sort'], $options['direction']);

        return $qb->getQuery();
    }
}
